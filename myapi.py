from fastapi import FastAPI, Path
from typing import Optional
from pydantic import BaseModel
# We run our web server using uvicorn
# uvicorn myapi:app --reload # Command to run the uvicorn server
# AutoGenerated docs at /docs

app = FastAPI() # Create a FastAPI instance

# Endpoint methods
# GET - GET INFO
# POST - CREATE SOMETHING NEW
# PUT - UPDATE
# DELETE - DELETE SOMETHING 

students = {
    1: {
        "name": "John",
        "age": 17,
        "year": 12
    }
}

class Student(BaseModel):
    name: str
    age: int
    year: int

class updateStudent(BaseModel):
    name: Optional[str] = None
    age: Optional[int] = None
    year: Optional[int] = None

# Create new endpoint for home page
@app.get("/")
def index():
    return {"name": "First Data"}

# Path Pramaters (Variable Path)
# These are dynamic variable which can return aout dynamic results
# based on the input recieved
@app.get("/get-student/{student_id}")
def get_student(student_id: int = Path(None, description="The ID of the student you want to view")):
    return students[student_id]

# Path is used to add more descriptive style
# It shows up in the docs and also checks on the inputs recieved in the API parameter

# Query Parameters
# eg: google.com/results?search=Python # querying the API
# We dont need to define the input in the path, but in the function definition
@app.get("/get-by-name")
def get_student(name : Optional[str] = None): # =None to make it optional # Best pratice to use it with Optional
    for student_id in students:
        if students[student_id]["name"] == name:
            return students[student_id]
    return {"Data": "Not Found!"}

# If we try to add a required paramter after the optional one we just made
# Python would give an error, as optional cannot be followed by a required parameter
# What we can do is add an asterisk "*" at the very begining to allow for any order to be followed for adding of query parameters

# We ca also combine Path parameters and Query Parameters
# Just by including them together

# We create a Student Model above from the BaseModel 
# and use it create a new student object
# This requires a request body, which is analogous to a form 
# and getting from the body what was entered in the form
@app.post("/create-student/{student_id}")
def create_student(student_id : int, student : Student):
    if student_id in students:
        return {"Error": "Student already exists!"}
    students[student_id] = student
    return students[student_id]

@app.put("/update-student/{student_id}")
def update_student(student_id : int, student: updateStudent):
    if student_id not in students:
        return {"Error": "Student does not exists!"}

# We do checks for each one so that we do not assign null values on each updation 
# and only update the rquired fields
    if student.name != None:
        students[student_id].name = student.name    
    
    if student.age != None:
        students[student_id].age = student.age    
    
    if student.year != None:
        students[student_id].year = student.year    

    return students[student_id]

@app.delete("/delete-student/{student_id}")
def delete_student(student_id : int):
    if student_id not in students:
        return {"Error": "Student does not exists!"}
    
    del students[student_id]
    return {"Message": "Student Deleted Successfuly!"}
    